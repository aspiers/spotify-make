# Makefile is generated from Makefile.in by configure
# Don't edit Makefile, your changes will be lost.


help_msg      = \
Plain 'make' doesn't do anything. Targets: \n\
   - download:   Download all sources \n\
   - install:    Install, possibly using DESTDIR to define location. \n\
   - register:   Notify system about new desktop icons etc. \n\
   - uninstall:  Remove everything installed.

dist          = @dist@
base_version  = @base_version@
arch          = @arch@
archlib       = @archlib@
repo          = http://repository.spotify.com/pool/non-free/s/spotify
lib_repo      = http://leamas.fedorapeople.org/spotify/$(base_version)
version       = @version@
archive       = @archive@
so_perms      = @so_perms@
prefix        = @prefix@
libdir        = @libdir@
datadir       = @datadir@
bindir        = @bindir@
mandir        = @mandir@
app_libdir    = $(libdir)/spotify-client
app_datadir   = $(datadir)/spotify-client

ifeq ($(dist),Fedora)
EXTRA_LIBS    = libssl.so.0.9.8 libcrypto.so.0.9.8
else
EXTRA_LIBS    =
endif

SOURCES       = spotify.bash spotify.1 spotify.desktop \
                $(EXTRA_LIBS) $(archive)

lib_to_data   := $(shell python -c 'import os.path;                          \
                                    print os.path.relpath("$(app_datadir)",  \
                                                          "$(app_libdir)")')
bin_to_lib    := $(shell python -c 'import os.path;                          \
                                    print os.path.relpath("$(app_libdir)",   \
                                                          "$(bindir)")')

all: help

help:
	@echo -e "\n$(help_msg)\n"

download: $(SOURCES)
	@# Download all sources

check_sources:
	@for f in $(SOURCES); do                                         \
	    test -f $$f || {                                            \
	        echo "Source $$f not available (try 'make download')";  \
	        exit 1;                                                 \
	    }                                                           \
	done

$(archive):
	wget -q -O $@ $(repo)/$@

github:
	rm -rf github; mkdir github;  cd github; \
	git clone  https://github.com/leamas/spotify-make


spotify.bash spotify.1 spotify.desktop: github
	cp github/spotify-make/$@ $@

ifeq ($(dist),Fedora)
$(EXTRA_LIBS):
	wget -q -O $@ $(lib_repo)/$@.$(arch)
endif

unpack: check_sources
	@# Unpack into libdir (arched files) and datadir(noarch).
	ar x $(archive)
	tar xzf data.tar.gz
	@rm -rf $(DESTDIR)$(app_libdir) $(DESTDIR)/$(app_datadir)
	@mkdir -p $(DESTDIR)$(app_libdir)  || :
	@mkdir -p $(DESTDIR)$(app_datadir) || :
	cp -ar ./opt/spotify/spotify-client/*  $(DESTDIR)$(app_datadir)
	mv $(DESTDIR)$(app_datadir)/libcef.so $(DESTDIR)$(app_libdir)
	mv $(DESTDIR)$(app_datadir)/spotify $(DESTDIR)$(app_libdir)

extra_libs: unpack
	[ -n "$(EXTRA_LIBS)" ] && \
	    cp -a $(EXTRA_LIBS) $(DESTDIR)$(app_libdir)  2>/dev/null || :

set_so_perms: unpack
	@# Set so files perms to 755 (e. g, fedora) or 644 (e. g. debian).
	chmod $(so_perms) \
	    $$( find $(DESTDIR)$(app_libdir) -name '*.so*' -writable)

applinks: unpack
	@# Add links to datadir in libdir (where things are searched for).
	cd $(DESTDIR)$(app_libdir);           \
	ln -sf $(lib_to_data)/*.pak    .;     \
	ln -sf $(lib_to_data)/locales  .;     \
	ln -sf $(lib_to_data)/Data     .;

syslinks: unpack extra_libs
	@# Match unresolved references found using ldd with system libs
	@# in linker cache found using ldconfig -p. Create links and
	@# report.
	@cd $(DESTDIR)$(app_libdir);                                     \
	for dep in $$( ldd  spotify | awk '/found$$/ {print $$1}' ); do  \
	    case $$dep in                                                \
	        libssl*)     hostlink='libssl.so.1.*0.*' ;;              \
	        libcrypto*)  hostlink='libcrypto.so.1.*0.*' ;;           \
	        *)           hostlink="$${dep%%.*}" ;;                   \
	    esac;                                                        \
	    hostlink=$$( ldconfig -p | grep $$hostlink | sed 's/.*=>//'  \
                         | egrep '$(archlib)' || :);                     \
	    if test "$$hostlink" != ''; then                             \
                ln -sf $$dep $$hostlink;                                 \
	        echo INFO: "resolving $$dep as \"$$hostlink\"";          \
	    else                                                         \
	        echo "WARNING; cant resolve spotify dependency: $$dep" ; \
	    fi                                                           \
	done || :

desktop:  unpack check_sources
	@# Install icons, desktop file etc.
	@icondir="$(DESTDIR)$(datadir)/icons/hicolor";                   \
	src_icons="$(DESTDIR)$(app_datadir)/Icons";                      \
	echo "Installing icons in $$icondir";                            \
	for size in 24 32 48 64 128 256; do                              \
	    install -pD  $$src_icons/spotify-linux-$$size.png            \
	        $$icondir/$${size}x$${size}/apps/spotify-client.png;     \
	done
	install -pD spotify.desktop     \
	    $(DESTDIR)$(datadir)/applications/spotify.desktop

addons: check_sources
	@#  Manpage and wrapper script
	sed -i '/^spotify=/s|.*|spotify=$(bin_to_lib)/spotify|' \
	    spotify.bash
	sed -i "s/version=.*/version=$(version)/" spotify.bash
	install -m 755 -pD spotify.bash $(DESTDIR)$(bindir)/spotify
	install -m 644 -pD spotify.1  $(DESTDIR)$(mandir)/man1/spotify.1

install: applinks syslinks unpack addons extra_libs desktop set_so_perms
	cp Makefile $(DESTDIR)$(app_datadir)


check-deps:
	@deps=$$( ldd $(DESTDIR)$(app_libdir)/spotify | grep 'not.*found' ); \
	if [ -z "$$deps" ]; then                                 \
	    echo "OK";                                           \
	    exit 0;                                              \
	else                                                     \
	    echo "Error: unresolved dependencies"; echo $$deps;  \
	    exit 1;                                              \
	fi

register:
	@# Register icons and check desktop file. Not done by default, makes
	@# no sense for a temporary install e. g., when packaging.
	-gtk-update-icon-cache --ignore-theme-index \
	    $(DESTDIR)$(datadir)/icons/hicolor
	-desktop-file-validate \
	    $(DESTDIR)$(datadir)/applications/spotify.desktop

uninstall:
	rm -rf $(DESTDIR)$(app_datadir)
	rm -rf $(DESTDIR)$(app_libdir)
	rm -f  $(DESTDIR)$(bindir)/spotify
	rm -f  $(DESTDIR)$(datadir)/icons/hicolor/*/apps/spotify-client.png
	rm -f  $(DESTDIR)$(mandir)/man1/spotify.1
	rm -f  $(DESTDIR)$(datadir)/applications/spotify.desktop

clean:
	rm -rf $(archive) spotify.bash spotify.1 $(EXTRA_LIBS) opt usr
	rm -rf control.tar.gz data.tar.gz *.deb debian-binary github
	rm -f spotify.desktop Makefile

support.tar.gz:
	tar cf support.tar.gz spotify.1 spotify.bash spotify.desktop
